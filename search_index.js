var documenterSearchIndex = {"docs":
[{"location":"concepts/#Concepts","page":"Concepts","title":"Concepts","text":"","category":"section"},{"location":"concepts/#Freudenthal-Triangulation","page":"Concepts","title":"Freudenthal Triangulation","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Freudenthal triangulation of a continuous space produces a set of vertices with integer coordinates. If we are working in an n dimensional space with a granularity of m  0, then we will get a set of vertices of the form v_1 v_2 dots v_n where m = v_1 ge v_2 ge cdots ge v_n ge 0.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"One example of a Freudenthal triangulation with n = 3 and m = 3 is shown below. Note that v_1 is always 3 so the diagram only shows v_2 and v_3","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"(Image: triangulation)","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Thus the vertices of the Freudenthal discretization of a 3-dimensional space with m=3 has 10 vertices:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"beginBmatrix 300  310  320  330    311  321  331    322  332     333 endBmatrix","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"In general, we can see that there are frac(m+n-1)m(n-1) vertices. This is because we can consider the sequence u_2 u_3 dots u_n where u_i = v_i + (n - i) for all 2 le i le n Then we must have that since v_i ge v_i+1 for 2 le i le n-1, this means that u_i  u_i+1. We also see that since v_2 le m, this means that u_2 le m + n - 2 and since v_n ge 0, this means that u_2 ge 0. Therefore, to count the number of vertices in a Freudenthal Triangulation, we must just select n-1 distinct integers in the range 0 m+n-2 and this will correspond to a unique sequence u_2 u_3 dots u_n and thus it corresponds to a unique vertex v_1 v_2 dots v_n where m = v_1 ge v_2 ge dots ge v_n ge 0 Thus there are binomm+n-1n-1 = frac(m+n-1)m(n-1) vertices in a Freudenthal triangulation of an n-dimensional space with granularity m.","category":"page"},{"location":"concepts/#Freudenthal-Simplex-and-Barycentric-Coordinates","page":"Concepts","title":"Freudenthal Simplex and Barycentric Coordinates","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"If we know the values of a function f at the integer Freudenthal vertices, we can use triangulation to estimate the value at an arbitrary point x from the n+1 vertices of the simplex enclosing x:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"f(x) = sum_i = 1^n+1 lambda_i f(v^(i))","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"where the vertices of the simplex containing x are v^(1) dots v^(n+1). The scalars lambda_i are barycentric coordinates of x with respect to the simplex vertices. Recall that barycentric coordinates are non-negative weights that sum to 1 such that x = sum_i = 1^n+1lambda_i v^(i).","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"To find the coordinates of the simplex containing x, we set the first vertex v^(1) = lfloor x_1 rfloor lfloor x_2 rfloor dots lfloor x_n rfloor where lfloor a rfloor is the greatest integer less than or equal to a.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"We then compute d = x - v^(1) and sort the components of d in descending order d_p_1 ge d_p_2 ge dots ge d_p_n where p is a permutation of 1:n. From here the remaining simplex vertices can be constructed as v^(k+1) = v^(k) + e_p_k where e_i is the ith standard basis vector.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"As an example suppose we wanted to find the simplex vertices for the Freudenthal triangulation of x = 12 -34 2. The first vertex is v^(1) = 1 -4 2 which means that d = 02 06 00. We then arrange the components in descending order, 06 ge 02 ge 00 so p = 2 1 3. Thus the remaining simplex vertices are:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"beginaligned\nv^(2) = 1 -4 2 + 010 = 1 -3 2 \nv^(3) = 1-32 + 1 0 0 = 2 -3 2 \nv^(4) = 2 -3 2 + 001 = 2-33\nendaligned","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"To compute the barycentric coordinates lambda, we set","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"beginaligned\nlambda_n+1 = d_p_n \nlambda_n = d_p_n-1 - d_p_n \nlambda_n-1 = d_p_n-2 - d_p_n-1 \nvdots \nlambda_2 = d_p_1 - d_p_2 \nlambda_1 = 1 - sum_i=1^n+1 lambda_i\nendaligned","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"We know that since d_p_1 ge d_p_2 ge dots ge d_p_n is a decreasing sequence of real numbers between 0 and 1, this means that 0 le lambda_i le 1 for 1 le i le n+1. We also have that for each coordinate x_j 1 le j le n, then","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"beginaligned\nsum_i=0^n+1lambda_i v^(i)_j = v^(1)_j left(sum_i=0^n+1 lambda_iright) + sum_i=j+1^n+1lambda_i = v^(1)_j + d_p_j = x_j\nendaligned","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Thus, we have the barycentric coordinates of x with respect to the Freudenthal simplex enclosing x.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"We see that in the Freudenthal simplex that we calculated above, the barycentric coordinates are","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"beginaligned\nlambda_4 = d_p_3 = 00 \nlambda_3 = d_p_2 - d_p_3 = 02 \nlambda_2 = d_p_1 - d_p_2 = 04 \nlambda_1 = 1 - lambda_2 - lambda_3 - lambda_4 = 04\nendaligned","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"We see that 12 -34 2 = 04 cdot 1 -4 2 + 04 cdot 1 -3 2 + 02 cdot 2 -3 2 + 00 cdot 2-33, confirming that the barycentric coordinates are correct.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Now using these barycentric coordinates and the vertices of the Freudenthal simplex, we will be able to perform function approximation in Freudenthal space. Specifically, we will approximate f(x) as","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"beginaligned\nf(x) approx sum_i = 1^n+1 f(v^(i)) lambda_i\nendaligned","category":"page"},{"location":"concepts/#Example","page":"Concepts","title":"Example","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Consider the example of f(xy) = sqrt(x-1)^2 + (y-1)^2 defined on the region R = (0 4) times (04). Then for each point (xy) in R, we can the Freudenthal simplex which contains (xy). We see that these simplices are triangles which are either defined by v^(1) = (p q) v^(2) = (p + 1 q) v^(3) = (p+1 q+1) or v^(1) = (p q) v^(2) = (p q + 1) v^(3) = (p+1 q+1) where p q in 0 1 2 3. Then we can also find the barycentric coordinates of (xy) in its simplex. Finally, we can use the barycentric coordinates lambda_1 lambda_2 lambda_3 to approximate the function f by","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"beginaligned\nf(x) approx f(v^(1)) lambda_1 + f(v^(2)) lambda_2 + f(v^(3)) lambda_3\nendaligned","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"For example, we can approximate f(1 15) by seeing that it is contained in the simplex with vertices v^(1) = (1 1) v^(2) = (1 2) v^(3) = (2 2) Then we also get that the barycentric coordiantes are lambda_1 = 05 lambda_2 = 05 lambda_3 = 0 Therefore, we can approximate f at (1 15) by","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"beginaligned\nf(x) approx 05 cdot 0 + 05 cdot 1^2 = 05\nendaligned","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"which is fairly close to the true value of 025.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The heatmaps of f and its approximation using Freudenthal triangulation are shown below:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"(Image: True Function Values) (Image: Approximate Function Values)","category":"page"},{"location":"concepts/#Belief-Space-Interpolation","page":"Concepts","title":"Belief Space Interpolation","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Now if we want to use freudenthal triangulation in belief-state planning, then we need to be able to convert integer vertices in Freudenthal space to form a triangulation of the belief over n discrete states. This transformation changes the vertex v into","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"v = frac1m v_1 - v_2 v_2 - v_3 dots v_n-1 - v_n v_n","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"where v represents a valid probability distribution that sums to 1 as v_1 = m. The probability assigned to the ith state is given by v_i.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The transformation is equivalent to the matrix multiplication v = Bv with","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"B = frac1mbeginbmatrix 1  -1  0  0  cdots  0  0  1  -1  0  cdots  0  vdots      vdots  0  0  cdots   1  -1  0  0  cdots   0  1 endbmatrix","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"This matrix B is invertible so the opposite transformation can be done. Hence any belief b can thus be mapped into Freudenthal space to obtain its counterpart x = B^-1b. It turns out that the ith component of B^-1b is simply m sum_k = i^n b_k Now that we have the ability to convert between belief space and Freudenthal space. We showed above how to interpolate in Freudenthal space with integer simplex vertices. To interpolate in belief spac,e we simply use the transformation to the belief space. Suppose we know the values mathcalU(b) at all of the vertices v in the belief triangulation. Given any new belief b we can compute x = B^-1b, find the vertices v^(1) v^(2) dots v^(n+1) of the corresponding simplex in the original Freudenthal triangulation and then compute the barycentric coordinates lambda = (lambda_1 lambda_2 dots lambda_n+1) for x The interpolate value is then:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"mathcalU(b) = sum_i=1^n+1 lambda_i mathcalU(v^(i)) = sum_i = 1^n+1 lambda_i mathcalU(Bv^(i))","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"[1] Algorithms for Decision Making by Mykel J. Kochenderfer, Tim A. Wheeler, Kyle H. Wray, MIT Press, 2022","category":"page"},{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/#Getting-Started","page":"Usage","title":"Getting Started","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"To use the FreudenthalTriangulations module, begin your code with","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using FreudenthalTriangulations","category":"page"},{"location":"usage/#FreudenthalTriangulation","page":"Usage","title":"FreudenthalTriangulation","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The FreudenthalTriangulation struct can be used to specify the dimension of the space which is represented by n and the m represents the granularity of the triangulation.","category":"page"},{"location":"usage/#Finding-Freudenthal-Vertices","page":"Usage","title":"Finding Freudenthal Vertices","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"To find a Freudenthal triangulation of a space of dimension n with granularity m use the vertices function which takes in a FreudenthalTriangulation struct and returns a list of vertices. Each of these vertices are represented by n dimensional vectors. Thus if we set T = FreudenthalTriangulation(n m) and","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"V = vertices(T)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"then V is a list of vertices comprising a freudenthal triangulation of an n dimensional space.","category":"page"},{"location":"usage/#Finding-Simplex-and-Barycentric-Coordinates","page":"Usage","title":"Finding Simplex and Barycentric Coordinates","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"To find the vertices of the simplex around a point x in Freudenthal space and the barycentric coordinates, run","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"V, coords = simplex(x)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Then we have that V is the simplex vertices in the Freudenthal space and coords will be the barycentric coordinates with respect to the simplex.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"For these functions, the requirements are","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"x::Vector{Float64} The point in Freudenthal space\nV::Vector{Vector{Float64}} The vertices of the simplex around x in Freudenthal space\ncoords::Vector{Float64} The barycentric coordinates of x with respect to the simplex","category":"page"},{"location":"usage/#Operating-in-Belief-Space","page":"Usage","title":"Operating in Belief Space","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"This package provides two functions to operate in belief space. First to convert a freudenthal triangulation into belief space use the function","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"bv = belief_vertices(T)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"We see that bv is a set of vertices in belief space corresponding to a freudenthal triangulation in Freudenthal space. Given any point in belief space we can find a simplex of points in these belief vertices bv and from there approximate the value function at this belief.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"This leads us into the second function over the belief space, belief_simplex. This function allows us to calculate the belief simplex of a belief.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"B, coords = belief_simplex(T, b)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"where T is a FreudenthalTriangulation struct and b is a belief. Then we have that B is a vector containing a set of beliefs corresponding to the belief simplex and coords is the barycentric coordinates of the belief in the belief simplex.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"For these functions, the requirements are","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"T::FreudenthalTriangulation FreudenthalTriangulation struct\nb::Vector{Float64} A belief in the belief space\nbv::Vector{Float64} The belief vertices of a triangulation T\nB::Vector{Vector{Float64}} The vector of vertices of the belief simplex of a belief b\ncoords::Vector{Float64} The barycentric coordinates of the belief in the belief simplex","category":"page"},{"location":"usage/#Example:-Interpolating-a-Function-in-Belief-Space","page":"Usage","title":"Example: Interpolating a Function in Belief Space","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"For an example of function approximation using this package, consider the function U(x,y) = ((x-1)^2 + (y-1)^2)^0.5.  However, assume that we do not have access to U(x,y) but instead, we only know U for values [x,y] in belief_vertices(FreudenthalTriangulation(2, m)) for some granularity m. Assume for this example that the maximum granularity is m = 3. Thus we have access to a function U_vertices(x, y) which returns U(x,y) if [x,y] in belief_vertices(FreudenthalTriangulation(2, 3)) and None otherwise.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Using U_vertices, we can create a function U_interp which will approximate U(x,y) by interpolating on the Freudenthal space. To do this, we will use the freudenthal_simplex_and_coords function.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"function U_interp(x, y)\n\tX = [x, y]\n\tT = FreudenthalTriangulation(2, 3)\n\tB, coords = belief_simplex(T, X)\n\n\tinterp_val = 0\n\tfor (b, coord) in zip(B, coords)\n\t\tinterp_val += U_vertices(v[1], v[2]) * coord\n\tend\n\treturn interp_val\nend\t\t","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Thus U_interp allows us to approximate U at real coordinates based on the U_vertices function.","category":"page"},{"location":"install/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"If you have a running Julia distribution (Julia 1.0 or greater), you have everything you need to install FreudenthalTriangulations.jl. To install the package, simply run the following from the Julia REPL:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"import Pkg\nPkg.add(\"FreudenthalTriangulations\")","category":"page"},{"location":"#[FreudenthalTriangulations.jl](https://github.com/sisl/FreudenthalTriangulations.jl)","page":"FreudenthalTriangulations.jl","title":"FreudenthalTriangulations.jl","text":"","category":"section"},{"location":"","page":"FreudenthalTriangulations.jl","title":"FreudenthalTriangulations.jl","text":"A Julia package that allows users to use Freudenthal triangulation for functional value approximation.","category":"page"},{"location":"#Package-Features","page":"FreudenthalTriangulations.jl","title":"Package Features","text":"","category":"section"},{"location":"","page":"FreudenthalTriangulations.jl","title":"FreudenthalTriangulations.jl","text":"Functions to find the simplex of a point x in Freudenthal space and the barycentric coordinates of that point with respect to the its simplex.\nSimple integration these functions into the existing interface","category":"page"},{"location":"#Table-of-Contents","page":"FreudenthalTriangulations.jl","title":"Table of Contents","text":"","category":"section"},{"location":"","page":"FreudenthalTriangulations.jl","title":"FreudenthalTriangulations.jl","text":"Pages = [\"install.md\", \"usage.md\", \"concepts.md\"]","category":"page"}]
}
